
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Akiva Gubbay
 */
public class Server extends javax.swing.JFrame {
    
    private int serverPort = 45000; // The port that this server is listening on
    private ServerSocket serverSocket = null;  // Server socket that will listen for incoming connections
    boolean hasStopped = false;
    Vector<ClientHandler> connections = new Vector<ClientHandler>();

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }
    
    class ClientHandler extends Thread {
        private Socket clientSocket;
        private Server server;
        private PrintWriter writer;
        private BufferedReader reader;
        private String clientName = "";
        
       public ClientHandler(Socket socket, Server server){
           this.clientSocket = socket;
           this.server = server;
       }
       
       public void closeConnection(){
           this.sendToAll("Client " + "name" + "disconnected.\n");
           server.connections.remove(this);
            try {
                clientSocket.close();
                writer.close();
                reader.close();
            } catch (IOException ex) {
                System.out.println("Error: closing socket on server side.");
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       //Maybe synchronized..
       public void closeAllConnections(){
           for(int i = 0; i < server.connections.size(); i++){
               ClientHandler ch = server.connections.get(i);
               ch.closeConnection();
           }
       }
       
       //Maybe synchronized..
       public void sendTo(String msg){
           writer.println(msg);
       }
       
       public void sendToAll(String msg){
           for(int i = 0; i < server.connections.size(); i++){
               ClientHandler ch = server.connections.get(i);
               ch.sendTo(msg);
           }
       }
       
        @Override
       public void run(){
            try {
                writer = new PrintWriter(clientSocket.getOutputStream(), true);
                reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                String msg;
                while (true) {//msg = reader.readLine()) != null
                    msg = reader.readLine();
                    String[] parts = msg.split(" ");
                    if(parts[0].equals("Name")){
                        this.clientName = parts[1];
                        this.sendToAll("Client " + clientName +"is online");
                    }
                    Thread.sleep(1);
                }
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_start = new javax.swing.JButton();
        btn_stop = new javax.swing.JButton();
        txtareaLog = new javax.swing.JScrollPane();
        txtArea_serverLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_start.setText("Start");
        btn_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_startActionPerformed(evt);
            }
        });

        btn_stop.setText("Stop");
        btn_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stopActionPerformed(evt);
            }
        });

        txtArea_serverLog.setEditable(false);
        txtArea_serverLog.setColumns(20);
        txtArea_serverLog.setRows(5);
        txtareaLog.setViewportView(txtArea_serverLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(btn_start)
                .addGap(69, 69, 69)
                .addComponent(btn_stop)
                .addContainerGap(107, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtareaLog)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_start)
                    .addComponent(btn_stop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtareaLog, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_startActionPerformed
        try {
            serverSocket = new ServerSocket(serverPort);
        } catch (IOException ex) {
            System.err.println("Error: Cannot listen on this port.\n" + ex.getMessage());
            txtArea_serverLog.append("Error: Cannot listen on this port.\n");
        }
        
        while(!hasStopped){ //need to sync 'hasStopped';
                Socket clientSocket = null;  // socket created by accept
                try {
                       clientSocket = this.serverSocket.accept(); // wait for a client to connect
                       
                } catch (IOException e) {
                       if(hasStopped) {
                           System.out.println("Error: server was stopped while waiting for clients to connect.\n");
                                return;
                       }
                }
                //new Thread( new WorkerRunnable(clientSocket, clientInfo)).start();
                ClientHandler ch = new ClientHandler(clientSocket, this);
                ch.start();
                connections.add(ch);
//                txtArea_serverLog.append("Client "+"name"+"is online.\n");
//                ch.sendToAll("Client "+"name"+"is online.");
            }
        
    }//GEN-LAST:event_btn_startActionPerformed

    private void btn_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stopActionPerformed
        for(int i = 0; i < connections.size(); i++){
               ClientHandler ch = connections.get(i);
               ch.closeConnection();
        }
        try {
            serverSocket.close();
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_stopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Server().setVisible(true);
                Server server = new Server();
                server.setVisible(true);
                server.setTitle("Server");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_start;
    private javax.swing.JButton btn_stop;
    private javax.swing.JTextArea txtArea_serverLog;
    private javax.swing.JScrollPane txtareaLog;
    // End of variables declaration//GEN-END:variables
}
